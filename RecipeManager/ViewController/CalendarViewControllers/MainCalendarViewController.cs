// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using EventKit;
using Foundation;
using MonoTouch.Dialog;
using UIKit;

namespace RecipeManager
{
	public partial class MainCalendarViewController : DialogViewController 
	{

		protected RootElement calendarListRoot = new RootElement("Calendars and Events");
		protected CalendarListViewController calendarListScreen;
		protected CreateEventEditViewDelegate eventControllerDelegate;

		public MainCalendarViewController() : base (UITableViewStyle.Grouped, null, true)
		{
			// build out our table using MT.D
			Root = calendarListRoot;
			// add our calendar lists items
			Root.Add(new Section("Calendar Lists") {
				new StyledStringElement ("Calendars",
					() => {
						LaunchCalendarListScreen (EKEntityType.Event);
					})
					{ Accessory = UITableViewCellAccessory.DisclosureIndicator }
			});
			// events
			Root.Add(new Section("Events") {
				new StyledStringElement ("Add New Event",
					() => {
						
					RequestAccess (EKEntityType.Event, () => {
							LaunchCreateNewEvent ();
						});
					})
			});
		}

		protected void LaunchCalendarListScreen(EKEntityType calendarStore)
		{
			calendarListScreen = new CalendarListViewController(calendarStore);
			NavigationController.PushViewController(calendarListScreen, true);
		}

		protected void RequestAccess(EKEntityType type, Action completion)
		{
			App.Current.EventStore.RequestAccess(type,
				(bool granted, NSError e) =>
				{
					InvokeOnMainThread(() =>
					{
						if (granted)
							completion.Invoke();
						else
							new UIAlertView("Access Denied", "User Denied Access to Calendars/Reminders", null, "ok", null).Show();
					});
				});
		}

		protected void LaunchCreateNewEvent()
		{
			EventKitUI.EKEventEditViewController eventController = new EventKitUI.EKEventEditViewController();
			eventController.EventStore = App.Current.EventStore;
			eventControllerDelegate = new CreateEventEditViewDelegate(eventController);
			eventController.EditViewDelegate = eventControllerDelegate;
			PresentViewController(eventController, true, null);
		}

		protected class CreateEventEditViewDelegate : EventKitUI.EKEventEditViewDelegate
		{
			protected EventKitUI.EKEventEditViewController eventController;

			public CreateEventEditViewDelegate(EventKitUI.EKEventEditViewController eventController)
			{
				this.eventController = eventController;
			}


			public override void Completed(EventKitUI.EKEventEditViewController controller, EventKitUI.EKEventEditViewAction action)
			{
				eventController.DismissViewController(true, null);

				switch (action)
				{
					case EventKitUI.EKEventEditViewAction.Canceled:
						break;
					case EventKitUI.EKEventEditViewAction.Deleted:
						break;
					case EventKitUI.EKEventEditViewAction.Saved:
						controller.Event.Notes = "Calorie count, cook time, ingredients, and steps";
						NSError e;
						App.Current.EventStore.SaveEvent(controller.Event,EKSpan.ThisEvent, out e);
						break;
				}
			}
		}
	}
}
